@page "/addemployee"
@using SendGrid
@using SendGrid.Helpers.Mail
@inject NavigationManager NavigationManager
@inject UserController User
@inject IJSRuntime JSRuntime
@inject CurrentLanguage language

<style>
    body { /*achtergrond*/
        background: linear-gradient(to left, #C4A484 50%, transparent 50%), url('https://i.imgur.com/GZVw5gT.png') repeat-x;
        background-color: #E9E9E9;
        background-size: 15500px 300px;
        background-position: 0px 0px;
        display: flex;
        flex-direction: column;
    }

    .mainsquare { /*rechthoek*/
        width: 1200px;
        height: 800px;
        background-color: #099F91;
        border-radius: 10px;
        position: relative;
        top: 100px;
        left: 50%;
        transform: translateX(-50%);
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .smallersquare { /*grootte kleinere rechthoek in tweede rechthoek*/
        width: 300px;
        height: 800px;
        background-color: #00A89B;
        border-radius: 10px;
        position: absolute;
        top: 0px;
        left: 0px;
        z-index: -1;
    }

    .squareinmainsquare { /*wit rechthoek in main rechthoek*/
        width: 800px;
        height: 700px;
        background-color: #E9E9E9;
        border-radius: 10px;
        position: absolute;
        top: 50px;
        left: 350px;
    }

    .buurtboer-logo {
        width: 300px;
        height: 250px;
        top: 0px;
        left: 0%;
        position: absolute;
    }

    .text-containersquare { /*positie en grootte tekst*/
        display: flex;
        flex-direction: column;
        justify-content: center;
        color: black;
        font-family: monospace;
        font-size: 24px;
        margin-top: 30px;
        margin-left: 325px;
    }

    .text-containersquaretwo { /*positie en grootte tekst*/
        display: flex;
        flex-direction: column;
        justify-content: center;
        color: black;
        font-family: monospace;
        font-size: 24px;
        margin-top: 50px;
        margin-left: 150px;
    }

    input { /*grootte naam en email blok*/
        margin-bottom: 30px;
        border: 2px solid white;
        border-radius: 8px;
        padding: 8px;
        width: 500px;
    }

    .addemployee-button { /*kleur van "Add" button*/
        background-color: #F9834C;
        color: white;
        border: none;
        border-radius: 8px;
        padding: 15px 30px;
        font-size: 24px;
        cursor: pointer;
        position: absolute;
        margin-top: 525px;
        margin-left: 200px;
    }

    .homescreen-button { /*knop om naar home page te gaan*/
        position: absolute;
        top: 350px;
        left: 30px;
        padding: 20px 0;
        width: 80%;
        background-color: #099F91;
        border: 1px solid #099F91;
        color: white;
        font-size: 16px;
        text-align: center;
        border-radius: 10px;
    }

        .homescreen-button:hover {
            background-color: #F9834C;
        }

    .employee-button { /*knop om naar employees page te gaan*/
        position: absolute;
        top: 425px;
        left: 30px;
        padding: 20px 0;
        width: 80%;
        background-color: #099F91;
        border: 1px solid #099F91;
        color: white;
        font-size: 16px;
        text-align: center;
        border-radius: 10px;
    }

        .employee-button:hover {
            background-color: #F9834C;
        }

    .grocerylist-button { /*knop om naar grocerylist page te gaan*/
        position: absolute;
        top: 500px;
        left: 30px;
        padding: 20px 0;
        width: 80%;
        background-color: #099F91;
        border: 1px solid #099F91;
        color: white;
        font-size: 16px;
        text-align: center;
        border-radius: 10px;
    }

        .grocerylist-button:hover {
            background-color: #F9834C;
        }

    .companies-button { /*knop om naar grocerylist page te gaan*/
        position: absolute;
        top: 500px;
        left: 30px;
        padding: 20px 0;
        width: 80%;
        background-color: #099F91;
        border: 1px solid #099F91;
        color: white;
        font-size: 16px;
        text-align: center;
        border-radius: 10px;
    }

        .companies-button:hover {
            background-color: #F9834C;
        }

    .lunchdata-button { /*knop om naar lunchdata page te gaan*/
        position: absolute;
        top: 575px;
        left: 30px;
        padding: 20px 0;
        width: 80%;
        background-color: #099F91;
        border: 1px solid #099F91;
        color: white;
        font-size: 16px;
        text-align: center;
        border-radius: 10px;
    }

        .lunchdata-button:hover {
            background-color: #F9834C;
        }

    .button-container { /*positie "NL" en "EN" buttons*/
        position: absolute;
        top: 250px;
        left: 30px;
        display: flex;
        flex-direction: row;
    }

    .language-button-clicked { /*kleur van taal button die aangeklikt is*/
        background-color: #F9834C;
        color: white;
        border: none;
        border-radius: 10px;
        padding: 10px 15px;
        font-size: 16px;
        margin-right: 10px;
        cursor: pointer;
    }

    .language-button-notclicked { /*kleur van taal button die NIET aangeklikt is*/
        background-color: #099F91;
        color: white;
        border: none;
        border-radius: 10px;
        padding: 10px 15px;
        font-size: 16px;
        margin-right: 10px;
        cursor: pointer;
    }

    .logout-button {
        position: absolute;
        top: 730px;
        left: 25px;
        padding: 20px 0px;
        height: 30px;
        width: 25%;
        background-color: #099F91;
        border: 1px solid #099F91;
        color: white;
        font-size: 13px;
        text-align: center;
        border-radius: 10px;
        line-height: 50%;
    }

        .logout-button:hover {
            background-color: #F9834C;
        }
</style>

<div class="mainsquare">
    @* HTML elements*@
    <div class="smallersquare">
        <img src="https://i.imgur.com/MF5gfZC.png" class="buurtboer-logo" />
        <div class="button-container">
            <button class="@GetLanguageButtonClass(true)"
            @onclick="() => SelectLanguage(true)">
                NL
            </button>

            <button class="@GetLanguageButtonClass(false)"
            @onclick="() => SelectLanguage(false)">
                EN
            </button>
        </div>
        <button class="homescreen-button" @onclick="HomeScreenRouting">Home</button>
        @if (User.CurrentUser != null)
        {
            @if (CheckUserRole() == Role.SuperAdmin)
            {
                <button class="companies-button" @onclick="CompaniesRouting">Companies</button>
            }
            else
            {
                <button class="grocerylist-button" @onclick="GroceryListRouting">Grocery List</button>
            }
        }
        <button class="employee-button" @onclick="EmployeeRouting">Employees</button>
        <button class="lunchdata-button" @onclick="LunchDataRouting">Lunchdata</button>
        <button class="logout-button" @onclick="HandleLogout">Log out</button>
    </div>
    <div class="squareinmainsquare">
        <div class="text-containersquare">
            @if (User.CurrentUser != null)
            {
                @if (CheckUserRole() == Role.SuperAdmin)
                {
                    <p>Add admin</p>
                }
                else
                {
                    <p>Add employee</p>
                }
            }
        </div>
        <div class="text-containersquaretwo">
            <label for="first name">First name:</label>
            <input type="text" @bind="firstname" />

            <label for="last name">Last name:</label>
            <input type="text" @bind="lastname" />
            
            <label for="email">Email:</label>
            <input type="text" @bind="email" />
            <button class="addemployee-button" @onclick="addEmployee">Add</button>
        </div>
    </div>
</div>

@code {
    public User currentUser = new();
    private string firstname = "";
    private string lastname = "";
    private string email = "";
    private bool isDutchSelected = true;


    private void HandleLogout()// uitloggen.
    {
        User.Logout();
        NavigationManager.NavigateTo("/login");
    }

    private async void addEmployee() // er moet een check komen of de email al in gebruik is of niet.
    {
        if (firstname != "" && lastname != "" && email != "")
        {
            if (email.Contains("@"))// kijken of er een '@' in zit.
            {
                int atSymbolIndex = email.IndexOf("@");

                if (atSymbolIndex > 0 && atSymbolIndex < email.Length - 1)// kijken of er minimaal één teken voor en na de '@' staat.
                {
                    if (email.Contains(".com"))// kijken of er '.com' in zit.
                    {
                        Role role = new Role();
                        // rol bepalen van nieuwe employee.
                        if (CheckUserRole() == Role.Admin)
                        {
                            role = Role.Employee;
                        }
                        else
                        {
                            role = Role.Admin;
                        }


                        // tijdelijk wachtwoord.
                        var password = "wachtwoordvoornu";

                        var user = new User(
                          firstname,
                          lastname,
                          password,
                          email,
                          role,
                          null,
                          User.CurrentUser.CompanyId
                        );
                        // nieuwe employee toevoegen en pop-up laten zien.
                        await User.addUser(user);
                        if (CheckUserRole() == Role.Admin)
                        {
                            await JSRuntime.InvokeVoidAsync("alert", "Employee has been invited");
                            SendInvitationEmail(email, "urltoinvitepeople");
                        }
                        else
                        {
                            await JSRuntime.InvokeVoidAsync("alert", "Admin has been invited");
                            SendInvitationEmail(email, "urltoinvitepeople");
                        }
                    }
                    else
                    {
                        await JSRuntime.InvokeVoidAsync("alert", "Email should contain '.com'");
                    }
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Email should have text before and behind the '@'");
                }
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Email should contain '@'");
            }
        }
    }

    private async void SendInvitationEmail(string email, string setPasswordUrl)// Email sturen naar employee wanneer uitgenodigd (WERKT NIET!!!)
    {
        var client = new SendGridClient("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");

        var msg = new SendGridMessage()
            {
                From = new EmailAddress("buurtboertest@hotmail.com", "Example Invites"),
                Subject = "Invitation to set account password",
                PlainTextContent = $"Please set your password here: {setPasswordUrl}"
            };
        msg.AddTo(new EmailAddress(email));

        var response = await client.SendEmailAsync(msg);

        if (response.StatusCode != System.Net.HttpStatusCode.Accepted)
        {
            // log error
            Console.WriteLine(response.StatusCode);
        }
    }

    protected async override Task OnInitializedAsync() // Gelijk wanneer pagina opent kijken of de persoon is ingelogd anders naar login scherm.
    {
        if (!IsUserLoggedIn())
        {
            NavigationManager.NavigateTo("/login");
        }
    }

    private bool IsUserLoggedIn() // kijken of gebruiker ingelogd is.
    {
        return User.CurrentUser != null;
    }

    private Role CheckUserRole()
    {
        return User.CurrentUser.Role;
    }

    private void HomeScreenRouting()
    {
        NavigationManager.NavigateTo("/home");
    }

    private void EmployeeRouting()
    {
        NavigationManager.NavigateTo("/employees");
    }

    private void GroceryListRouting()
    {
        NavigationManager.NavigateTo("/grocerylist");
    }

    private void LunchDataRouting()
    {
        NavigationManager.NavigateTo("/lunchdata");
    }

    private void CompaniesRouting()
    {
        NavigationManager.NavigateTo("/companies");
    }

    private string GetLanguageButtonClass(bool isDutch) // hiermee kijk je welke taal er geselecteerd is en of hij dus moet veranderen of niet.
    {
        if (isDutch == language.isDutchSelected)
        {
            return "language-button-clicked";
        }
        else
        {
            return "language-button-notclicked";
        }
    }

    private void SelectLanguage(bool isDutch)
    {
        // kijken of nederlands geselecteerd is.
        language.isDutchSelected = isDutch;

        // refresh de webpage met de goede kleuren.
        StateHasChanged();
    }
}